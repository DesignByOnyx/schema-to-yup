/** Declaration file generated by dts-gen */

export class YupBuilder {
    constructor(e: any, n: any);

    createYupSchemaEntry(t: any): any;

    getName(t: any): any;

    getProps(t: any): any;

    getRequired(t: any): any;

    getType(t: any): any;

    isRequired(t: any): any;

    normalizeRequired(): any;

    propToYupSchemaEntry(t: any): any;

    propsToShape(t: any): any;

}

export class YupSchemaEntry {
    constructor(e: any);

    array(t: any): any;

    boolean(t: any): any;

    date(t: any): any;

    defaultType(t: any): void;

    error(t: any): void;

    isValidSchema(): any;

    number(t: any): any;

    object(t: any): any;

    string(t: any): any;

    toEntry(): any;

}

export function YupSchemaEntryError(...args: any[]): void;

export function buildYup(t: any, e: any): any;

export function createYupSchemaEntry(t: any): any;

export function extendYupApi(t: any): any;

export namespace YupSchemaEntryError {
    const stackTraceLimit: number;

    function captureStackTrace(p0: any, p1: any): any;

}

export namespace types {
    class YupArray {
        constructor(e: any);

        $additionalItems(): any;

        $contains(): any;

        $items(): any;

        $uniqueItems(): any;

        compact(): any;

        convert(): any;

        ensureItems(): any;

        handleInvalidSize(t: any, e: any): any;

        isValidSize(t: any): any;

        itemsOf(): any;

        maxItems(): any;

        minItems(): any;

        static create(t: any): any;

    }

    class YupDate {
        constructor(e: any);

        convert(): any;

        handleInvalidDate(t: any, e: any): any;

        isValidDate(t: any): any;

        isValidDateType(t: any): any;

        maxDate(): any;

        minDate(): any;

        toDate(t: any): any;

        transformToDate(t: any): any;

        static create(t: any): any;

    }

    class YupMixed {
        constructor(e: any);

        $allOf(): any;

        $anyOf(): any;

        $const(): any;

        $else(): any;

        $if(): any;

        $oneOf(): any;

        $then(): any;

        addConstraint(t: any, e: any): any;

        addMappedConstraints(): any;

        addValueConstraint(t: any, e: any): any;

        buildConstraint(t: any, e: any): any;

        convert(): any;

        convertEnabled(): void;

        createConstraintBuilder(t: any): any;

        createSchemaEntry(): any;

        createWhenConditionFor(t: any): any;

        deNormalize(): void;

        errMessage(t: any): any;

        error(t: any, e: any): void;

        errorMsg(t: any): void;

        getConstraints(): any;

        isType(): any;

        message(): any;

        normalize(): void;

        notOneOf(): any;

        nullable(): any;

        onConstraintAdded(t: any): any;

        oneOf(): any;

        rebind(...args: any[]): void;

        throwError(t: any): void;

        toValidJSONSchema(): void;

        valErrMessage(t: any): any;

        validateOnCreate(t: any, e: any, n: any): void;

        when(): any;

    }

    class YupNumber {
        constructor(e: any);

        convert(): any;

        integer(): any;

        negative(): any;

        normalize(): void;

        normalizeNumType(t: any): any;

        posNeg(): void;

        positive(): any;

        processConstraint(t: any): void;

        round(): any;

        truncate(): any;

        static create(t: any): any;

        static schemaEntryFor(t: any): any;

    }

    class YupObject {
        constructor(e: any);

        camelCase(): any;

        constantCase(): any;

        convert(): any;

        noUnknown(): any;

        static create(t: any): any;

    }

    class YupString {
        constructor(e: any);

        convert(): any;

        email(): any;

        genericFormat(): void;

        lowercase(): any;

        maxLength(): any;

        minLength(): any;

        normalize(): void;

        pattern(): any;

        trim(): any;

        uppercase(): any;

        url(): any;

        static create(t: any): any;

    }

    const errValKeys: string[];

    function Base(e: any): void;

    function ConvertYupSchemaError(...args: any[]): void;

    function YupBoolean(e: any): void;

    function toYupArray(t: any, e: any): any;

    function toYupBoolean(t: any, e: any): any;

    function toYupDate(t: any, e: any): any;

    function toYupNumber(t: any, e: any): any;

    function toYupNumberSchemaEntry(t: any, e: any): any;

    function toYupObject(t: any, e: any): any;

    function toYupString(t: any, e: any): any;

    namespace ConvertYupSchemaError {
        const stackTraceLimit: number;

        function captureStackTrace(p0: any, p1: any): any;

    }

    namespace YupBoolean {
        function create(t: any): any;

    }

    namespace defaults {
        function errMessages(t: any): any;

    }

}

